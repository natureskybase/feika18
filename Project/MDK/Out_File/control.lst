C251 COMPILER V5.60.0,  control                                                            27/04/23  18:18:34  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE control
OBJECT MODULE PLACED IN .\Out_File\control.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\CODE\control.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Lib
                    -raries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src)
                    - DEBUG PRINT(.\Out_File\control.lst) TABS(2) OBJECT(.\Out_File\control.obj) 

stmt  level    source

    1          #include "control.h"
    2          #include "math.h"
    3          #include "pid.h"
    4          
    5          
    6          akeman_t akeman_left ;    //结构体变量，记录脉冲，实际速度，目标速度
    7          akeman_t akeman_right;
    8          uint8 pid_flag=0;         //电机闭环开启标志
    9          float order_angle=0;      //目标角度
   10          float order_speed=0;      //目标速度
   11          float adc_err=0;       //电感误差
   12          float adc_err_array[5];//窗口电感误差
   13          int16 window_flag=1;   //窗口标志位
   14          int16 Roundabout_flag=0;//环岛检测标志位
   15          float ADC_error_a=0;     //电感误差加速度(ms)
   16          
   17          /**************************************************************************
   18          函数功能：舵机角度和电机速度的协同控制
   19          输入参数：小车基准速度（单位：mm/s），舵机角度（单位：°）
   20          **************************************************************************/
   21          void Akeman_Control(float basic_speed,float target_angle)
   22          {
   23   1        float akeman_diff;  //左右轮相对basic_speed的差速
   24   1        
   25   1        /****读取编码器数值****/
   26   1        Encoder_Read();
   27   1        Encoder_Clear();
   28   1        
   29   1        /****计算两电机实际转速****/
   30   1        //编码器是1024线，4倍频，齿数为30
   31   1        //车轮直径56mm，与编码器对应齿数为68
   32   1        akeman_left.current_speed  = pulse_left *0.20603922;
   33   1        akeman_right.current_speed = pulse_right*0.20603922;
   34   1        
   35   1        /****计算两电机目标转速****/
   36   1        akeman_diff = basic_speed*(14.2*tan(target_angle*3.14/180.0))/20.0; //相对差速
   37   1        akeman_left.target_speed  = basic_speed - akeman_diff;
   38   1        akeman_right.target_speed = basic_speed + akeman_diff;
   39   1        
   40   1        /****PID开启时控制电机和舵机****/
   41   1        if(pid_flag)
   42   1        {
   43   2          /****电机闭环****/
   44   2          Motor_PID_Control(akeman_left.current_speed ,akeman_left.target_speed ,akeman_right.current_speed ,akem
             -an_right.target_speed);
   45   2          
   46   2          /****舵机转角****/
   47   2          Steer_Spin(target_angle);
   48   2        }
   49   1      }
   50          
   51          /**************************************************************************
   52          函数功能：电机PID闭环控制
   53          输入参数：左右轮的实际与目标转速
   54          **************************************************************************/
   55          void Motor_PID_Control(float current_l,float target_l,float current_r,float target_r)
   56          {
C251 COMPILER V5.60.0,  control                                                            27/04/23  18:18:34  PAGE 2   

   57   1        static float pwm_l=0;
   58   1        static float pwm_r=0; 
   59   1        
   60   1        
   61   1      //  static float pwm_l=0,error_l=0,last_error_l=0,prev_error_l=0;
   62   1      //  static float pwm_r=0,error_r=0,last_error_r=0,prev_error_r=0;
   63   1      //  float kp_l=akeman_left.kp ,ki_l=akeman_left.ki ,kd_l=akeman_left.kd ;
   64   1      //  float kp_r=akeman_right.kp,ki_r=akeman_right.ki,kd_r=akeman_right.kd;
   65   1      //  
   66   1      //  /****计算本次偏差****/
   67   1      //  error_l = target_l - current_l;
   68   1      //  error_r = target_r - current_r;
   69   1      //  
   70   1      //  /****若实际速度为0，则不加积分项****/
   71   1      //  if(current_l==0) ki_l=0;
   72   1      //  if(current_r==0) ki_r=0;
   73   1      //  
   74   1      //  /****增量式PID控制器****/
   75   1      //  pwm_l += (int32)(kp_l*(error_l-last_error_l) + ki_l*error_l + kd_l*(error_l-2*last_error_l+prev_error_
             -l))*100;
   76   1      //  pwm_r += (int32)(kp_r*(error_r-last_error_r) + ki_r*error_r + kd_r*(error_r-2*last_error_r+prev_error_
             -r))*100;
   77   1      //  
   78   1      //  /****限幅****/
   79   1      //  if(pwm_l >  PWM_DUTY_MAX) pwm_l =  PWM_DUTY_MAX;
   80   1      //  if(pwm_l < -PWM_DUTY_MAX) pwm_l = -PWM_DUTY_MAX;
   81   1      //  if(pwm_r >  PWM_DUTY_MAX) pwm_r =  PWM_DUTY_MAX;
   82   1      //  if(pwm_r < -PWM_DUTY_MAX) pwm_r = -PWM_DUTY_MAX;
   83   1      //  
   84   1      //  /****保存前两次偏差****/
   85   1      //  prev_error_l = last_error_l;
   86   1      //  prev_error_r = last_error_r;
   87   1      //  last_error_l = error_l;
   88   1      //  last_error_r = error_r;
   89   1      
   90   1        pwm_l=pid_calc(&pid_left_,current_l,target_l);
   91   1        pwm_r=pid_calc(&pid_right_,current_r,target_r); 
   92   1        Motor_Control((int32)pwm_l,(int32)pwm_r);
   93   1      }
   94          /**************************************************************************
   95          函数功能：电感差比和运算
   96          输入参数：A,B为差比和权重
   97          **************************************************************************/
   98          float ADC_error_processing(float A,float B,float compensation)
   99          {
  100   1      //  考虑电感值误差处理
  101   1      //  adc_err = (1/1.0*adc1-1/1.0*adc4)/(1/1.0*adc1+1/1.0*adc4);
  102   1      //  adc_err = (adc4 - adc1)/10;
  103   1        adc_err = (A*(adc1-adc4)/(float)(adc1+adc4))+(B*(adc2-adc3)/(float)(adc2+adc3))+compensation/100;
  104   1        return adc_err;
  105   1      }
  106          
  107          
  108          /**************************************************************************
  109          函数功能：一阶低通滤波
  110          输入参数：无
  111          **************************************************************************/
  112          float ADC_error_weight_filtering(void)
  113          {
  114   1        static float adc_err_last = 0;
  115   1        adc_err = (0.8)*adc_err+(0.2)*adc_err_last;
  116   1        adc_err_last = adc_err;
  117   1        
  118   1        return adc_err;
  119   1      }
  120          
C251 COMPILER V5.60.0,  control                                                            27/04/23  18:18:34  PAGE 3   

  121          /**************************************************************************
  122          函数功能：窗口滤波//有待求证
  123          输入参数：窗口数组
  124          **************************************************************************/
  125          float ADC_error_window_filtering(void)
  126          {
  127   1        adc_err_array[window_flag]=adc_err;
  128   1        window_flag ++;
  129   1        if(window_flag==5)
  130   1          window_flag=0;
  131   1        if(adc_err_array[0]!=0)
  132   1          adc_err=(adc_err_array[1]+adc_err_array[2]+adc_err_array[3]+adc_err_array[4])/4;
  133   1        return adc_err;
  134   1      }
  135          
  136          /**************************************************************************
  137          函数功能：ADC_err采集值加速度
  138          输入参数：无
  139          **************************************************************************/
  140          float ADC_error_acceleration(void)
  141          {
  142   1        ADC_error_a=(adc_err_array[3]+adc_err_array[4]-adc_err_array[1]-adc_err_array[2])/4*100;
  143   1        return ADC_error_a;
  144   1      }
  145          /**************************************************************************
  146          函数功能：环岛检测
  147          输入参数：无
  148          **************************************************************************/
  149          void Roundabout_detection(void)
  150          {
  151   1        float adc_err_Roundabout;
  152   1        adc_err_Roundabout = ADC_error_processing(0.2,0.8,0);
  153   1      //  if()//入环检测
  154   1      //  Roundabout_flag = 1;
  155   1        
  156   1      }
  157          /**************************************************************************
  158          函数功能：弯道检测
  159          输入参数：无
  160          **************************************************************************/
  161          void Corners_detection(void)
  162          {
  163   1      
  164   1      }
  165          /**************************************************************************
  166          函数功能：根据adc读值修正角度
  167          输入参数：PID控制参数
  168          **************************************************************************/
  169          float Correct_Angle(float kp,float kd,float ki)
  170          {
  171   1        float target_angle;
  172   1        float target_angle_last;
  173   1        static float adc_err_last = 0;
  174   1      
  175   1      //  pd控制方案
  176   1      //  target_angle = kp*adc_err + kd*(adc_err-adc_err_last);
  177   1      //  kp+=adc_err*adc_err*0.1;//加入动态变化
  178   1        
  179   1      //  pid控制方案
  180   1        target_angle = kp*adc_err + +kd*(adc_err-adc_err_last)+(ki+=ki*adc_err);
  181   1        target_angle=0.8*target_angle+0.2*target_angle_last;
  182   1        target_angle_last=target_angle;
  183   1        
  184   1        adc_err_last = adc_err;
  185   1        
  186   1        return target_angle;
C251 COMPILER V5.60.0,  control                                                            27/04/23  18:18:34  PAGE 4   

  187   1      }
  188          
  189          /**************************************************************************
  190          函数功能：开启电机闭环
  191          **************************************************************************/
  192          void PID_on(void)
  193          {
  194   1        pid_flag = 1;
  195   1      }
  196          
  197          /**************************************************************************
  198          函数功能：关闭电机闭环
  199          **************************************************************************/
  200          void PID_off(void)
  201          {
  202   1        pid_flag = 0;
  203   1      }
*** WARNING C183 IN LINE 152 OF ..\CODE\control.c: dead assignment eliminated
*** WARNING C184 IN LINE 181 OF ..\CODE\control.c: value of 'target_angle_last' possibly undefined


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       677     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        97         20
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        81     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
